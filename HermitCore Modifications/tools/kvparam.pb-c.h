/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kvparam.proto */

#ifndef PROTOBUF_C_kvparam_2eproto__INCLUDED
#define PROTOBUF_C_kvparam_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Kvdata__Kvparam Kvdata__Kvparam;


/* --- enums --- */


/* --- messages --- */

struct  _Kvdata__Kvparam
{
  ProtobufCMessage base;
  int32_t operation;
  char *key;
  char *value;
  protobuf_c_boolean has_length;
  int32_t length;
  protobuf_c_boolean has_ret;
  int32_t ret;
};
#define KVDATA__KVPARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kvdata__kvparam__descriptor) \
    , 0, NULL, NULL, 0,0, 0,0 }


/* Kvdata__Kvparam methods */
void   kvdata__kvparam__init
                     (Kvdata__Kvparam         *message);
size_t kvdata__kvparam__get_packed_size
                     (const Kvdata__Kvparam   *message);
size_t kvdata__kvparam__pack
                     (const Kvdata__Kvparam   *message,
                      uint8_t             *out);
size_t kvdata__kvparam__pack_to_buffer
                     (const Kvdata__Kvparam   *message,
                      ProtobufCBuffer     *buffer);
Kvdata__Kvparam *
       kvdata__kvparam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kvdata__kvparam__free_unpacked
                     (Kvdata__Kvparam *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Kvdata__Kvparam_Closure)
                 (const Kvdata__Kvparam *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kvdata__kvparam__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kvparam_2eproto__INCLUDED */
